# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  # schedules the job to run at 00:00 every Saturday
  schedule:
    - cron: '0 0 * * SAT' # This line schedules the job to run at 00:00 every Saturday
  workflow_dispatch:
  push:
    branches: [ "pkg" ]
  pull_request:
    branches: [ "pkg" ]

jobs:
  build:
    runs-on: ${{ matrix.sys.os }}
    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        sys:
          - { os: ubuntu-latest, shell: bash }
          - { os: windows-latest, shell: 'msys2 {0}' }
          - { os: macos-latest, shell: bash }
        build_type: [Release]
        # c_compiler: [gcc, clang, cl]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
        # exclude:
        #  - os: windows-latest
        #    c_compiler: gcc
        #  - os: windows-latest
        #    c_compiler: clang
        #  - os: ubuntu-latest
        #    c_compiler: cl

    steps:
    - name: Configure package on Windows
      uses: msys2/setup-msys2@v2
      if: runner.os == 'Windows'
      with:
        msystem: MSYS
        update: true
        install: >-
          base-devel
          git
          make
          cmake
          gcc
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
        # pacboy: >-
        #   toolchain:p
        #   cmake:p
        #   ninja:p

    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Add mingw64 to PATH on Windows
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # ls -R C:\msys64
        which cmake
        # which msys2

    - name: Install libpcap on Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt install -y libpcap-dev libsystemd-dev

    - name: Configure CMake for Windows
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      working-directory: "${{ github.workspace }}"
      run: >
        cmake -B "build"
        -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}"
        -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}"
        -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}"
        -S .

    - name: Build
      working-directory: "${{ steps.strings.outputs.build-output-dir }}"
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        cmake --build . --config "${{ matrix.build_type }}"

    - name: Test
      working-directory: "${{ steps.strings.outputs.build-output-dir }}"
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config "${{ matrix.build_type }}"

    - name: package
      working-directory: "${{ steps.strings.outputs.build-output-dir }}"
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: make package

    - name: Get Package Basename
      working-directory: "${{ steps.strings.outputs.build-output-dir }}"
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: get_basename
      run: |
        pkg_name=$(basename *.tar.gz)
        echo "pkg_basename=${pkg_name}" >> "$GITHUB_OUTPUT"

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.3
      with:
        # Artifact name
        # optional, default is artifact
        name: "${{ steps.get_basename.outputs.pkg_basename }}"
        # A file, directory or wildcard pattern that describes what to upload
        path: "${{ steps.strings.outputs.build-output-dir }}/${{ steps.get_basename.outputs.pkg_basename }}"

  release:
    needs: build
    runs-on: ubuntu-latest

    # only runs when the schedule or workflow_dispatch is triggered
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Source Code Archive
        run: |
          git archive --format=tgz -o source-code.tar.gz $GITHUB_REF_NAME
          git archive --format=zip -o source-code.tar.gz $GITHUB_REF_NAME

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This line gets the GITHUB_TOKEN secret
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        id: upload-release-assets
        run: |
          for file in ./package-*/xxx-*-*.tar.gz ./source-code.tar.gz ./source-code.zip; do
            echo "Uploading $file"
            curl \
              --data-binary @"$file" \
              -H "Content-Type: application/gzip" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "${{ steps.create_release.outputs.upload_url }}/assets?name=$(basename $file)"
          done
